act_comm.js:    for ( var x in sockets )
act_comm.js:      if ( sockets[x].name != name && sockets[x].state == 4 )
act_comm.js:        Util.msg( sockets[x].socket,format,"chat");
act_comm.js:              var targ = sockets[targid].name;
act_comm.js:              for ( var x in sockets ) 
act_comm.js:                  if ( sockets[x].id == targid ) // The Target
act_comm.js:                    Util.msg( sockets[x].socket, vfound.variable(name,targ, name), "chat");
act_comm.js:                  else if ( character.player.socket.id == sockets[x].id ) // The player
act_comm.js:                    Util.msg( sockets[x].socket, cfound.variable(name,targ, name), "chat");
act_comm.js:                  else if ( character.player.socket.id != sockets[x].id && sockets[x].id != targid ) // Everyone else
act_comm.js:                    Util.msg( sockets[x].socket, ofound.variable(name,targ, name), "chat");
act_comm.js:                  if ( sockets[x].state != 4 )
act_comm.js:                    channelChat( sockets[x].character, vfound.variable(name, targ, name), channel, "self");
act_comm.js:                    channelChat( sockets[x].character, cfound.variable(name, targ, name), channel, "self");
act_comm.js:                    channelChat( sockets[x].character, ofound.variable(name, targ, name), channel, "self");
act_info.js:  for ( var x in sockets )
act_info.js:    if ( sockets[x].state == 4 )
act_info.js:      order.push( sockets[x].id );
act_info.js:  order.sort( function(b,a) { return sockets[a].character.level - sockets[b].character.level});
act_info.js://    for ( var a in sockets[x].character )
act_info.js://      Util.debug(a + " : " + sockets[x].character[a]);
act_info.js:      var arr = [ sockets[x].character.level, classTable[ sockets[x].character.job].name, sockets[x].character.name ];
act_update.js:  for ( var x in sockets ) {
act_update.js:    if ( sockets[x].state != 4 )
act_update.js:    info = sockets[x].character.hp +":"+ sockets[x].character.maxhp+ ":" + sockets[x].character.mana + ":" + sockets[x].character.maxmana;
act_update.js:    sockets[x].socket.emit("barUpdate",info);
act_wiz.js:          for ( var x in sockets ) {
act_wiz.js:            if ( sockets[x].state == 4 )
act_wiz.js:              save.savePlayer( sockets[x].character);
act_wiz.js:              copyover[sockets[x].id] = sockets[x].name;
act_wiz.js:              sockets[x].socket.emit('copyover','');
act_wiz.js:               sockets[x].socket.emit("info", "<img src='http://kefka.redcrown.net/images/fmv/disex.png'><br />");
act_wiz.js:               sockets[x].socket.emit("info", "##0AFThe bright flash of the Light of Judgement covers the land!".color());
act_wiz.js:          for ( var x in sockets )
act_wiz.js:            if ( sockets[x].state == 4 )
act_wiz.js:              save.savePlayer(sockets[x].character);
functions.js:    sockets[ character.player.socket.id ].state = 0;
functions.js:  for ( var x in sockets )
functions.js:        var arr = [ sockets[x].ip, sockets[x].character.name, sockets[x].state, sockets[x].id ];
functions.js:  info.push("Sockets: " + Object.keys(sockets).length );
save.js:  Util.debug("loadPlayer: " + sockets[id].name);
save.js:  db.query(query, [ sockets[id].name ], function (err, rows, field) {
save.js:      Util.error("Error reading player file for " + sockets[id].name);
save.js:        sockets[id].guid = rows[i].guid;
save.js:        sockets[id].character.guid = sockets[id].guid;
save.js:        Util.debug("No Guid found - Using premade " + sockets[id].guid);
save.js:        sockets[id].character.guid = sockets[id].guid;
save.js:        sockets[id].character.room = 1;
save.js:        sockets[id].character.name = sockets[id].name;
save.js:        savePlayer( sockets[id].character);
save.js:              sockets[id].player[y.toString()] = pfile[y];
save.js:              sockets[id].character[y.toString()] = cfile[y];
save.js:            var room = sockets[id].character.room;
save.js:            sockets[id].character.room = -1;
save.js:            Rooms.playerToRoom( sockets[id].character, room);
save.js://              if ( players[x].name == sockets[id].name )
save.js://            players.push(sockets[id].player);
socket.js:GLOBAL.sockets = {};
socket.js:  sockets[socket.id] = sock;
socket.js:  sock.character.guid = sockets[socket.id].guid;
socket.js:          sockets[socket.id].id = socket.id;
socket.js:          socket.emit("id", sockets[socket.id].id);
socket.js:              sockets[socket.id].player.pass = rows[i].passwd;
socket.js:              sockets[socket.id].player.name = rows[i].name;
socket.js:              sockets[socket.id].name = rows[i].name;
socket.js:              if ( pass == sockets[socket.id].player.pass ) {
socket.js:                     sockets[socket.id].character.name = name.cap();
socket.js:                  //                save.loadPlayer( sockets[socket.id].player );
socket.js:                  Util.msgall(sockets[socket.id].name + " has connected.", null, "chat");
socket.js:                  setTimeout(function() { sio.state(socket,4); act_info.doLook( sockets[socket.id].character,""); },10);
socket.js:          sockets[socket.id].character.name = name.cap();
socket.js:          sockets[socket.id].player.pass = pass;
socket.js:          sockets[socket.id].player.email = email;
socket.js:          Util.info("New character: " + sockets[socket.id].character.name); //player[socket.id].name);
socket.js:          socket.emit('copyoversuccess', sockets[socket.id].character.name); //player[socket.id].name);
socket.js:          var post = {guid: sockets[socket.id].guid, name: sockets[socket.id].character.name, passwd: pass }; //player[socket.id].name, passwd: pass };
socket.js:        save.savePlayer( sockets[id].character );
socket.js:        if ( sockets[id].state == 4 )
socket.js:          Util.msgall(sockets[id].name + " has lost connection.",null, "chat");
socket.js:        delete sockets[id].player["socket"];//.socket;
socket.js:        Util.info("Disconnected: " + sockets[id].name + " - " + sockets[id].ip);
socket.js:        Util.debug("Removing " + sockets[id].name + " : " + sockets[id].id);
socket.js:        delete sockets[id];
socket.js:     for ( var x in sockets ) {  //fix dis
socket.js:     if ( sockets[x].id != socket.id )
socket.js:     save.savePlayer( sockets[x].character );
socket.js:     if ( sockets[socket.id].state == 4 )
socket.js:     Util.msgall(sockets[socket.id].name + " has lost connection.",null, "chat");
socket.js:     Util.info("Disconnected: " + sockets[x].name + " - " + sockets[x].ip);
socket.js:     Util.debug("Removing " + sockets[x].name);
socket.js:     delete sockets[x];
socket.js:      sockets[socket.id].name = info.name;
socket.js:      sockets[socket.id].id = socket.id;
socket.js:      //        save.loadPlayer( sockets[socket.id].player );
socket.js:      Util.msgall( sockets[socket.id].character.name + " materializes.", null, "chat");
socket.js:      socket.emit('copyoversuccess', sockets[socket.id].character.name); //player[socket.id].name);
socket.js:    sockets[socket.id].state = 0;
socket.js:  if ( sockets[socket.id].state != 4 )
socket.js:  functions.checkCommand(msg, sockets[socket.id].character);
socket.js:  for ( var x in sockets )
socket.js:    if ( sockets[x].sock == sock )
socket.js:  //  var i = sockets.indexOf(socket);
socket.js:  //    sockets.splice(i, 1);
socket.js:  sockets.push(sock);
socket.js:    for ( var x in sockets )
socket.js:      if ( sockets[x].id != x && sockets[socket.id].name == sockets[x].name )
socket.js:        var sock = sockets[socket.id].socket;
socket.js:  sockets[socket.id].state = state;
socket.js:  sockets[socket.id].player.state = state;
socket.js:        sockets[id].socket.emit('copyoversuccess', sockets[id].name);
socket.js:          Util.debug("Checking " + characters[x].guid + " vs " + sockets[id].guid );
socket.js:          if ( characters[x].guid == sockets[id].guid ) // Reconnection
socket.js:          Util.msgall(sockets[id].name + " has connected.", null, "chat");
socket.js:          Util.msgall(sockets[id].name + " has reconnected.", null, "chat");
socket.js:        setTimeout(function() { sio.state( sockets[id].socket,4); act_info.doLook( sockets[id].character,""); },10);
socket.js:        //        players.push( sockets[id].player );
socket.js:        players[ sockets[id].guid ] = sockets[id].player;
socket.js:        characters[ sockets[id].guid ] = sockets[id].character;
socket.js:        //        characters.push( sockets[id].character );
util.js:    for ( var x in sockets ) {
util.js:      if ( sockets[x].state == 4 && ( sockets[x].name.toLowerCase() == target.toLowerCase() ||  sockets[x].name.toLowerCase().startsWith(target.toLowerCase())  ) )
util.js:        return sockets[x].id;
util.js:    for ( var x in sockets )
util.js:      if ( sockets[x].state != 4 || sockets[x].room != vnum)
util.js:      if ( plr != null && sockets[x].name == plr )
util.js:      Util.msg(sockets[x].socket,msg, channel);
util.js:    for ( var x in sockets )
util.js:      if ( sockets[x] != undefined )
util.js:        if ( sockets[x].state == 4 )
util.js:            if ( sockets[x].character.room.room != room )
util.js:          Util.msg(sockets[x].socket,string, chan);
